image : python:alpine

stages:
  # - codequality
  # - test
  - build_package
  - build_docs
  - deploy
  # - pages

before_script:
  # comandos comunes para los stages
  # las build essential de alpine por si dependencias necesitan ser empaquetadas
  - apk add --update alpine-sdk

# codequality:
#   stage: codequality
#   when: always
#   except:
#     - tags
#   before_script:
#     - pip install --upgrade pip
#     - pip install pylint_gitlab pylint-exit
#   script:
#     - cp .ci-cd/.pylintrc .
#     - mkdir ./pylint
#     # - pip install -r requirements_cpu.txt
#     - pylint --output-format=text ./src | tee ./pylint/pylint.log || pylint-exit $?
#     - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
#     - anybadge --label=code-quality-$CI_COMMIT_BRANCH --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
#     - echo "Pylint score is $PYLINT_SCORE"
#     - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter ./src > codeclimate.json
#     - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter ./src > ./pylint/index.html
#     - mkdir public
#     - cp ./pylint/index.html public/index.html
#   artifacts:
#     paths:
#       - ./pylint/
#       - codeclimate.json
#       - public
#     reports:
#       codequality: codeclimate.json
#   tags:
#       - docker

# pages:
#   stage: pages
#   tags:
#       - docker
#   script:
#     - cd public/
#     - echo "<html><body><h1>Directory listing:</h1>" > ./index.html
#     - find -exec echo "<a href='{}'>{}</a><br/>" \; >> ./index.html
#     - echo "</body></html>" >> ./index.html
#   artifacts:
#     paths:
#       - public

# test:
#   stage: test
#   before_script:
#     - pip install --upgrade pip
#   script:
#     # - "pip uninstall AnalysisResults || :"
#     # - pip install .
#     - pip install -r requirements_cpu.txt
#     - cd tests
#     - python -m unittest discover
#   only:
#     - merge_requests
#   tags:
#     - docker

build_package:
  stage : build_package
  script:
    - pip install twine
    - sed -i "s/VERSION/'$CI_COMMIT_TAG'/g" setup.py
    - cat setup.py
    - apk add --no-cache unzip
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=$ARTIFACT_PASS TWINE_USERNAME=$ARTIFACT_USER python -m twine upload --repository-url https://kodea.danobatgroup.com/api/v4/projects/$CI_PROJECT_ID/packages/pypi dist/*
    - mkdir packages
    - mv dist/$CI_PROJECT_NAME-$CI_COMMIT_TAG* packages
  only :
    - tags
  artifacts:
    name : packages
    paths :
      - packages
  tags:
    - docker


build_docs:
  stage: build_docs
  script:
  - pip install --upgrade pip
  - pip install mkdocs
  # Add your custom theme if not inside a theme_dir
  # (https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes)
  - pip install mkdocs-material mkdocs-glightbox
  #- pip install mkdocs-rtd-dropdown
  # Exportar a PDF https://github.com/zhaoterryy/mkdocs-pdf-export-plugin
  - apk --update --upgrade add gcc musl-dev jpeg-dev zlib-dev libffi-dev cairo-dev pango-dev gdk-pixbuf-dev openjpeg-dev
  - pip install mkdocs-pdf-export-plugin
  # Para colorear codigo fuente
  - pip install pygments
  # Extensione especificas python; https://squidfunk.github.io/mkdocs-material/extensions/pymdown/
  - pip install pymdown-extensions
  # plugin para integracion de notebooks de jupyter
  - pip install mkdocs-jupyter
  # Para hacer docstrings de forma automática
  - pip install mkdocstrings[python]
  # plugin para mostrar autores
  - pip install mkdocs-git-authors-plugin
  # plugin para indicar fecha de ediciÃ³n en cada pagina
  - pip install mkdocs-git-revision-date-localized-plugin
  - ls -R
  - mkdocs build --config-file mkdocs/mkdocs.yml
  # Asier
  # Crear la carpeta dummy y guardar dentro "site", que es la carpeta creada por mkdocs build, pero con el nombre custom dado por el fichero "project-name.txt" del repo
  # - mkdir $DUMMY_FOLDER
  # - PROJECT_NAME_AUX=$( cat project-name.txt)
  # - mv site "$DUMMY_FOLDER/$PROJECT_NAME_AUX"
  - mv mkdocs/site $CI_PROJECT_NAME
  artifacts:
    paths:
    # Asier
    # - $DUMMY_FOLDER
    - $CI_PROJECT_NAME
    expire_in: 1 week
  # only:
  #   - master
  #   - main
  tags:
    - docker
  variables:
    GIT_SUBMODULE_STRATEGY: recursive

deploy:
  stage: deploy
  script:
  # sshpass para poder enviar la contraseÃƒÂ±a automaticamente en la publicacion
  # openssh para scp
  - apk add --update-cache sshpass openssh
  - sshpass -V
  - export SSHPASS=$DOK_PASS
  - sshpass -e scp -r -o stricthostkeychecking=no $CI_PROJECT_NAME $DOK_USER@$DOK_HOST:/var/www/html/$DOK_FOLDER
  # Asier
  # Subir la carpeta (con el nombre custom) al servidor de documentacion
  # - PROJECT_NAME_AUX=$( cat project-name.txt)
  # - sshpass -e scp -r -o stricthostkeychecking=no "$DUMMY_FOLDER/$PROJECT_NAME_AUX" $DOK_USER@$DOK_HOST:/var/www/html/$DOK_FOLDER
  # only:
  #   - master
  #   - main
  tags:
    - docker